import fs from 'fs';
import winston from 'winston';

const logsPath = './logs';

if (!fs.existsSync(logsPath)) {
    fs.mkdirSync(logsPath);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const scriptName = process.argv[2] || 'Unknown Script';

// –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é winston
const logger = winston.createLogger({
    level: 'info',
    format: winston.format.combine(
        winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
        winston.format.printf(info => `${info.timestamp} ${info.level}: ${info.message}`)
    ),
    transports: [
        new winston.transports.File({ filename: `${logsPath}/${scriptName}.txt`, options: { flags: 'a' } })
    ]
});

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏ –¥–∞—Ç—É/–≤—Ä–µ–º—è –≤ –Ω–∞—á–∞–ª–æ –ª–æ–≥-—Ñ–∞–π–ª–∞
const logHeader = `--------------------------------\n‚ñ∂Ô∏è${scriptName}\nüïó${new Date().toLocaleString()}\n`;

fs.appendFileSync(`${logsPath}/${scriptName}.txt`, logHeader, 'utf8');

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ console
const originalLog = console.log;
const originalError = console.error;
const originalWarn = console.warn;
const originalInfo = console.info;

function formatArgs(args) {
    return args.map(arg => {
        if (typeof arg === 'object') {
            try {
                return JSON.stringify(arg, null, 2);
            } catch (e) {
                return '[Circular]';
            }
        }
        return arg;
    }).join(' ');
}

console.log = (...args) => {
    logger.info(formatArgs(args));
    originalLog(...args);
};

console.error = (...args) => {
    logger.error(formatArgs(args));
    originalError(...args);
};

console.warn = (...args) => {
    logger.warn(formatArgs(args));
    originalWarn(...args);
};

console.info = (...args) => {
    logger.info(formatArgs(args));
    originalInfo(...args);
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–≥–µ—Ä –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
global.logger = logger;